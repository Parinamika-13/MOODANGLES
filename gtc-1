Main Skills You Must Show

Push a multi-folder project to a private repo

git init

git remote add origin <url>

git add .

git commit -m "msg"

git push -u origin main

Work with Remotes

git remote -v (list)

git remote add origin <url>

git remote remove origin

git remote rename origin upstream

git remote set-url origin <new_url>

git fetch origin (download only)

git pull origin main (download + merge)

git push origin main (upload)

Branching + Switching

git branch (list)

git branch feature-x (create)

git checkout feature-x (switch)

git checkout -b new-feature (create + switch)

git merge feature-x (merge into main)

git branch -d feature-x (delete safe)

git branch -D feature-x (force delete)

git branch -r (list remote branches)

git remote prune origin (clean up deleted remote branches)

Undo / Fix

git restore <file> (undo unstaged changes)

git reset <file> (unstage)

git revert <commit> (undo commit safely)

git commit --amend -m "new msg" (fix commit message)

git reflog + git checkout -b branch <commit> (recover deleted branch)

Inspecting

git status

git log / git log --oneline

git diff / git diff --staged

git show <commit>

git blame <file> (who changed a line)

Stash (Save Work Temporarily)

git stash

git stash list

git stash pop / git stash apply

.gitignore

Know how to create .gitignore and add patterns like *.log, node_modules/.

ðŸ”¹ Scenario-Based Questions (Exam Style)

These are must-memorize since theyâ€™ll appear exactly as-is:

Discard unstaged changes â†’ git restore <file>

Unstage file but keep changes â†’ git reset <file>

Fix last commit message â†’ git commit --amend -m "new msg"

View history â†’ git log

View changes not staged â†’ git diff

Switch branch â†’ git checkout <branch>

Recover deleted branch â†’ git reflog + git checkout -b <branch> <commit>

Push local commits â†’ git push origin main

Fetch without merge â†’ git fetch origin

Create + switch to new branch â†’ git checkout -b search-filter

Remove file from history â†’ git filter-branch ... (but in exams they just want the idea)

Merge branch â†’ git merge <branch>

Resolve conflict â†’ edit file â†’ git add . â†’ git commit

Ignore files â†’ .gitignore with patterns

See who changed a line â†’ git blame file

Save work without commit â†’ git stash

Restore stash â†’ git stash pop

Delete branch safely â†’ git branch -d branch

Delete branch forcefully â†’ git branch -D branch

Check if branch merged â†’ git branch --merged

ðŸ”¹ Remote-Specific Questions

Clone repo â†’ git clone <url>

See remotes â†’ git remote -v

Add remote â†’ git remote add origin <url>

Remove remote â†’ git remote remove origin

Rename remote â†’ git remote rename origin upstream

Change URL â†’ git remote set-url origin <new_url>

Fetch without merge â†’ git fetch origin

Pull with merge â†’ git pull origin main

Push â†’ git push origin main

First push (set upstream) â†’ git push -u origin main

List remote branches â†’ git branch -r

Prune deleted remotes â†’ git remote prune origin

Fetch specific branch â†’ git fetch origin branch

Show remote info â†’ git remote show origin

Rebase â†’ git rebase origin/main
